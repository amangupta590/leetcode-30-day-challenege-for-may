class node{
    public:
        char ch;
        unordered_map<char,node*>children;
        bool terminal;
    node(char d){
        this->ch=d;
        terminal=false;
    }
};
class Trie {
    node*root;
    //int cnt;
public:
    /** Initialize your data structure here. */
    Trie() {
        root=new node('\0');
        //cnt=0; 
        
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        node *temp=root;
        for(int i=0;i<word.size();i++){
            char ch=word[i];
            if(temp->children.count(ch)){
                temp=temp->children[ch];
            }
            else{
                node *n=new node(ch);
                temp->children[ch]=n;
                temp=n;
            }
        }
        temp->terminal=true;       
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        node *temp=root;
        for(int i=0;i<word.size();i++){
            char ch=word[i];
            if(temp->children.count(ch)==0){
                return false;
            }
            else{
                temp=temp->children[ch];
            }
        }
        return temp->terminal;        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        node*temp=root;
        for(int i=0;i<prefix.size();i++){
            char ch=prefix[i];
            if(temp->children.count(ch)==0){
                return false;
            }
            else{
                temp=temp->children[ch];
            }
        }
        return true;       
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
